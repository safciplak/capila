// Code generated by mockery. DO NOT EDIT.

package cache

import (
	context "context"

	store "github.com/eko/gocache/v2/store"
	mock "github.com/stretchr/testify/mock"
)

// MockInterfaceGetterSetter is an autogenerated mock type for the InterfaceGetterSetter type
type MockInterfaceGetterSetter struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockInterfaceGetterSetter) Get(ctx context.Context, key interface{}) (interface{}, error) {
	ret := _m.Called(ctx, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, key, object, options
func (_m *MockInterfaceGetterSetter) Set(ctx context.Context, key interface{}, object interface{}, options *store.Options) error {
	ret := _m.Called(ctx, key, object, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, *store.Options) error); ok {
		r0 = rf(ctx, key, object, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockInterfaceGetterSetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfaceGetterSetter creates a new instance of MockInterfaceGetterSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfaceGetterSetter(t mockConstructorTestingTNewMockInterfaceGetterSetter) *MockInterfaceGetterSetter {
	mock := &MockInterfaceGetterSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
