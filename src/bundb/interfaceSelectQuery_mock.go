// Code generated by mockery. DO NOT EDIT.

package bundb

import (
	context "context"

	bun "github.com/uptrace/bun"

	mock "github.com/stretchr/testify/mock"

	schema "github.com/uptrace/bun/schema"

	sql "database/sql"
)

// MockInterfaceSelectQuery is an autogenerated mock type for the InterfaceSelectQuery type
type MockInterfaceSelectQuery struct {
	mock.Mock
}

// AppendQuery provides a mock function with given fields: fmter, b
func (_m *MockInterfaceSelectQuery) AppendQuery(fmter schema.Formatter, b []byte) ([]byte, error) {
	ret := _m.Called(fmter, b)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(schema.Formatter, []byte) []byte); ok {
		r0 = rf(fmter, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(schema.Formatter, []byte) error); ok {
		r1 = rf(fmter, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Apply provides a mock function with given fields: fn
func (_m *MockInterfaceSelectQuery) Apply(fn func(InterfaceSelectQuery) InterfaceSelectQuery) InterfaceSelectQuery {
	ret := _m.Called(fn)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(func(InterfaceSelectQuery) InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Column provides a mock function with given fields: columns
func (_m *MockInterfaceSelectQuery) Column(columns ...string) InterfaceSelectQuery {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceSelectQuery); ok {
		r0 = rf(columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// ColumnExpr provides a mock function with given fields: query, args
func (_m *MockInterfaceSelectQuery) ColumnExpr(query string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Conn provides a mock function with given fields: db
func (_m *MockInterfaceSelectQuery) Conn(db bun.IConn) InterfaceSelectQuery {
	ret := _m.Called(db)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(bun.IConn) InterfaceSelectQuery); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Count provides a mock function with given fields: ctx
func (_m *MockInterfaceSelectQuery) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Distinct provides a mock function with given fields:
func (_m *MockInterfaceSelectQuery) Distinct() InterfaceSelectQuery {
	ret := _m.Called()

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func() InterfaceSelectQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// DistinctOn provides a mock function with given fields: query, args
func (_m *MockInterfaceSelectQuery) DistinctOn(query string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Except provides a mock function with given fields: other
func (_m *MockInterfaceSelectQuery) Except(other InterfaceSelectQuery) InterfaceSelectQuery {
	ret := _m.Called(other)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// ExceptAll provides a mock function with given fields: other
func (_m *MockInterfaceSelectQuery) ExceptAll(other InterfaceSelectQuery) InterfaceSelectQuery {
	ret := _m.Called(other)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// ExcludeColumn provides a mock function with given fields: columns
func (_m *MockInterfaceSelectQuery) ExcludeColumn(columns ...string) InterfaceSelectQuery {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceSelectQuery); ok {
		r0 = rf(columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Exec provides a mock function with given fields: ctx
func (_m *MockInterfaceSelectQuery) Exec(ctx context.Context) (sql.Result, error) {
	ret := _m.Called(ctx)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(context.Context) sql.Result); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx
func (_m *MockInterfaceSelectQuery) Exists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// For provides a mock function with given fields: s, args
func (_m *MockInterfaceSelectQuery) For(s string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(s, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Group provides a mock function with given fields: columns
func (_m *MockInterfaceSelectQuery) Group(columns ...string) InterfaceSelectQuery {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceSelectQuery); ok {
		r0 = rf(columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// GroupExpr provides a mock function with given fields: group, args
func (_m *MockInterfaceSelectQuery) GroupExpr(group string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, group)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(group, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Having provides a mock function with given fields: having, args
func (_m *MockInterfaceSelectQuery) Having(having string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, having)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(having, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Intersect provides a mock function with given fields: other
func (_m *MockInterfaceSelectQuery) Intersect(other InterfaceSelectQuery) InterfaceSelectQuery {
	ret := _m.Called(other)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// IntersectAll provides a mock function with given fields: other
func (_m *MockInterfaceSelectQuery) IntersectAll(other InterfaceSelectQuery) InterfaceSelectQuery {
	ret := _m.Called(other)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Join provides a mock function with given fields: join, args
func (_m *MockInterfaceSelectQuery) Join(join string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, join)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(join, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// JoinOn provides a mock function with given fields: cond, args
func (_m *MockInterfaceSelectQuery) JoinOn(cond string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, cond)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(cond, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// JoinOnOr provides a mock function with given fields: cond, args
func (_m *MockInterfaceSelectQuery) JoinOnOr(cond string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, cond)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(cond, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Limit provides a mock function with given fields: n
func (_m *MockInterfaceSelectQuery) Limit(n int) InterfaceSelectQuery {
	ret := _m.Called(n)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(int) InterfaceSelectQuery); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Model provides a mock function with given fields: model
func (_m *MockInterfaceSelectQuery) Model(model interface{}) InterfaceSelectQuery {
	ret := _m.Called(model)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(interface{}) InterfaceSelectQuery); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// ModelTableExpr provides a mock function with given fields: query, args
func (_m *MockInterfaceSelectQuery) ModelTableExpr(query string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Offset provides a mock function with given fields: n
func (_m *MockInterfaceSelectQuery) Offset(n int) InterfaceSelectQuery {
	ret := _m.Called(n)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(int) InterfaceSelectQuery); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Operation provides a mock function with given fields:
func (_m *MockInterfaceSelectQuery) Operation() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Order provides a mock function with given fields: orders
func (_m *MockInterfaceSelectQuery) Order(orders ...string) InterfaceSelectQuery {
	_va := make([]interface{}, len(orders))
	for _i := range orders {
		_va[_i] = orders[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceSelectQuery); ok {
		r0 = rf(orders...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// OrderExpr provides a mock function with given fields: query, args
func (_m *MockInterfaceSelectQuery) OrderExpr(query string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Relation provides a mock function with given fields: name, apply
func (_m *MockInterfaceSelectQuery) Relation(name string, apply ...func(InterfaceSelectQuery) InterfaceSelectQuery) InterfaceSelectQuery {
	_va := make([]interface{}, len(apply))
	for _i := range apply {
		_va[_i] = apply[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...func(InterfaceSelectQuery) InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(name, apply...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Rows provides a mock function with given fields: ctx
func (_m *MockInterfaceSelectQuery) Rows(ctx context.Context) (*sql.Rows, error) {
	ret := _m.Called(ctx)

	var r0 *sql.Rows
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Rows); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scan provides a mock function with given fields: ctx, dest
func (_m *MockInterfaceSelectQuery) Scan(ctx context.Context, dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) error); ok {
		r0 = rf(ctx, dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanAndCount provides a mock function with given fields: ctx, dest
func (_m *MockInterfaceSelectQuery) ScanAndCount(ctx context.Context, dest ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) int); ok {
		r0 = rf(ctx, dest...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, dest...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Table provides a mock function with given fields: tables
func (_m *MockInterfaceSelectQuery) Table(tables ...string) InterfaceSelectQuery {
	_va := make([]interface{}, len(tables))
	for _i := range tables {
		_va[_i] = tables[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceSelectQuery); ok {
		r0 = rf(tables...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// TableExpr provides a mock function with given fields: query, args
func (_m *MockInterfaceSelectQuery) TableExpr(query string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Union provides a mock function with given fields: other
func (_m *MockInterfaceSelectQuery) Union(other InterfaceSelectQuery) InterfaceSelectQuery {
	ret := _m.Called(other)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// UnionAll provides a mock function with given fields: other
func (_m *MockInterfaceSelectQuery) UnionAll(other InterfaceSelectQuery) InterfaceSelectQuery {
	ret := _m.Called(other)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// Where provides a mock function with given fields: query, args
func (_m *MockInterfaceSelectQuery) Where(query string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// WhereAllWithDeleted provides a mock function with given fields:
func (_m *MockInterfaceSelectQuery) WhereAllWithDeleted() InterfaceSelectQuery {
	ret := _m.Called()

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func() InterfaceSelectQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// WhereDeleted provides a mock function with given fields:
func (_m *MockInterfaceSelectQuery) WhereDeleted() InterfaceSelectQuery {
	ret := _m.Called()

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func() InterfaceSelectQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// WhereGroup provides a mock function with given fields: sep, fn
func (_m *MockInterfaceSelectQuery) WhereGroup(sep string, fn func(InterfaceSelectQuery) InterfaceSelectQuery) InterfaceSelectQuery {
	ret := _m.Called(sep, fn)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, func(InterfaceSelectQuery) InterfaceSelectQuery) InterfaceSelectQuery); ok {
		r0 = rf(sep, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// WhereOr provides a mock function with given fields: query, args
func (_m *MockInterfaceSelectQuery) WhereOr(query string, args ...interface{}) InterfaceSelectQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceSelectQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// WherePK provides a mock function with given fields: cols
func (_m *MockInterfaceSelectQuery) WherePK(cols ...string) InterfaceSelectQuery {
	_va := make([]interface{}, len(cols))
	for _i := range cols {
		_va[_i] = cols[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceSelectQuery); ok {
		r0 = rf(cols...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// With provides a mock function with given fields: name, query
func (_m *MockInterfaceSelectQuery) With(name string, query schema.QueryAppender) InterfaceSelectQuery {
	ret := _m.Called(name, query)

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func(string, schema.QueryAppender) InterfaceSelectQuery); ok {
		r0 = rf(name, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockInterfaceSelectQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfaceSelectQuery creates a new instance of MockInterfaceSelectQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfaceSelectQuery(t mockConstructorTestingTNewMockInterfaceSelectQuery) *MockInterfaceSelectQuery {
	mock := &MockInterfaceSelectQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
