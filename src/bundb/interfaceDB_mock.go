// Code generated by mockery. DO NOT EDIT.

package bundb

import (
	context "context"

	bun "github.com/uptrace/bun"

	mock "github.com/stretchr/testify/mock"

	reflect "reflect"

	schema "github.com/uptrace/bun/schema"

	sql "database/sql"
)

// MockInterfaceDB is an autogenerated mock type for the InterfaceDB type
type MockInterfaceDB struct {
	mock.Mock
}

// AddQueryHook provides a mock function with given fields: hook
func (_m *MockInterfaceDB) AddQueryHook(hook bun.QueryHook) {
	_m.Called(hook)
}

// Begin provides a mock function with given fields:
func (_m *MockInterfaceDB) Begin() (InterfaceTx, error) {
	ret := _m.Called()

	var r0 InterfaceTx
	if rf, ok := ret.Get(0).(func() InterfaceTx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginTx provides a mock function with given fields: ctx, opts
func (_m *MockInterfaceDB) BeginTx(ctx context.Context, opts *sql.TxOptions) (InterfaceTx, error) {
	ret := _m.Called(ctx, opts)

	var r0 InterfaceTx
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) InterfaceTx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBStats provides a mock function with given fields:
func (_m *MockInterfaceDB) DBStats() bun.DBStats {
	ret := _m.Called()

	var r0 bun.DBStats
	if rf, ok := ret.Get(0).(func() bun.DBStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bun.DBStats)
	}

	return r0
}

// Dialect provides a mock function with given fields:
func (_m *MockInterfaceDB) Dialect() schema.Dialect {
	ret := _m.Called()

	var r0 schema.Dialect
	if rf, ok := ret.Get(0).(func() schema.Dialect); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.Dialect)
		}
	}

	return r0
}

// Exec provides a mock function with given fields: query, args
func (_m *MockInterfaceDB) Exec(query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *MockInterfaceDB) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Formatter provides a mock function with given fields:
func (_m *MockInterfaceDB) Formatter() schema.Formatter {
	ret := _m.Called()

	var r0 schema.Formatter
	if rf, ok := ret.Get(0).(func() schema.Formatter); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(schema.Formatter)
	}

	return r0
}

// NewAddColumn provides a mock function with given fields:
func (_m *MockInterfaceDB) NewAddColumn() InterfaceAddColumnQuery {
	ret := _m.Called()

	var r0 InterfaceAddColumnQuery
	if rf, ok := ret.Get(0).(func() InterfaceAddColumnQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceAddColumnQuery)
		}
	}

	return r0
}

// NewCreateIndex provides a mock function with given fields:
func (_m *MockInterfaceDB) NewCreateIndex() InterfaceCreateIndexQuery {
	ret := _m.Called()

	var r0 InterfaceCreateIndexQuery
	if rf, ok := ret.Get(0).(func() InterfaceCreateIndexQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceCreateIndexQuery)
		}
	}

	return r0
}

// NewCreateTable provides a mock function with given fields:
func (_m *MockInterfaceDB) NewCreateTable() InterfaceCreateTableQuery {
	ret := _m.Called()

	var r0 InterfaceCreateTableQuery
	if rf, ok := ret.Get(0).(func() InterfaceCreateTableQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceCreateTableQuery)
		}
	}

	return r0
}

// NewDelete provides a mock function with given fields:
func (_m *MockInterfaceDB) NewDelete() InterfaceDeleteQuery {
	ret := _m.Called()

	var r0 InterfaceDeleteQuery
	if rf, ok := ret.Get(0).(func() InterfaceDeleteQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceDeleteQuery)
		}
	}

	return r0
}

// NewDropColumn provides a mock function with given fields:
func (_m *MockInterfaceDB) NewDropColumn() InterfaceDropColumnQuery {
	ret := _m.Called()

	var r0 InterfaceDropColumnQuery
	if rf, ok := ret.Get(0).(func() InterfaceDropColumnQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceDropColumnQuery)
		}
	}

	return r0
}

// NewDropIndex provides a mock function with given fields:
func (_m *MockInterfaceDB) NewDropIndex() InterfaceDropIndexQuery {
	ret := _m.Called()

	var r0 InterfaceDropIndexQuery
	if rf, ok := ret.Get(0).(func() InterfaceDropIndexQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceDropIndexQuery)
		}
	}

	return r0
}

// NewDropTable provides a mock function with given fields:
func (_m *MockInterfaceDB) NewDropTable() InterfaceDropTableQuery {
	ret := _m.Called()

	var r0 InterfaceDropTableQuery
	if rf, ok := ret.Get(0).(func() InterfaceDropTableQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceDropTableQuery)
		}
	}

	return r0
}

// NewInsert provides a mock function with given fields:
func (_m *MockInterfaceDB) NewInsert() InterfaceInsertQuery {
	ret := _m.Called()

	var r0 InterfaceInsertQuery
	if rf, ok := ret.Get(0).(func() InterfaceInsertQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceInsertQuery)
		}
	}

	return r0
}

// NewRaw provides a mock function with given fields: query, args
func (_m *MockInterfaceDB) NewRaw(query string, args ...interface{}) InterfaceRawQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceRawQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceRawQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceRawQuery)
		}
	}

	return r0
}

// NewSelect provides a mock function with given fields:
func (_m *MockInterfaceDB) NewSelect() InterfaceSelectQuery {
	ret := _m.Called()

	var r0 InterfaceSelectQuery
	if rf, ok := ret.Get(0).(func() InterfaceSelectQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceSelectQuery)
		}
	}

	return r0
}

// NewTruncateTable provides a mock function with given fields:
func (_m *MockInterfaceDB) NewTruncateTable() InterfaceTruncateTableQuery {
	ret := _m.Called()

	var r0 InterfaceTruncateTableQuery
	if rf, ok := ret.Get(0).(func() InterfaceTruncateTableQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceTruncateTableQuery)
		}
	}

	return r0
}

// NewUpdate provides a mock function with given fields:
func (_m *MockInterfaceDB) NewUpdate() InterfaceUpdateQuery {
	ret := _m.Called()

	var r0 InterfaceUpdateQuery
	if rf, ok := ret.Get(0).(func() InterfaceUpdateQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceUpdateQuery)
		}
	}

	return r0
}

// NewValues provides a mock function with given fields: model
func (_m *MockInterfaceDB) NewValues(model interface{}) InterfaceValuesQuery {
	ret := _m.Called(model)

	var r0 InterfaceValuesQuery
	if rf, ok := ret.Get(0).(func(interface{}) InterfaceValuesQuery); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceValuesQuery)
		}
	}

	return r0
}

// Prepare provides a mock function with given fields: query
func (_m *MockInterfaceDB) Prepare(query string) (bun.Stmt, error) {
	ret := _m.Called(query)

	var r0 bun.Stmt
	if rf, ok := ret.Get(0).(func(string) bun.Stmt); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(bun.Stmt)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareContext provides a mock function with given fields: ctx, query
func (_m *MockInterfaceDB) PrepareContext(ctx context.Context, query string) (bun.Stmt, error) {
	ret := _m.Called(ctx, query)

	var r0 bun.Stmt
	if rf, ok := ret.Get(0).(func(context.Context, string) bun.Stmt); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(bun.Stmt)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: query, args
func (_m *MockInterfaceDB) Query(query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Rows
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryContext provides a mock function with given fields: ctx, query, args
func (_m *MockInterfaceDB) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Rows
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRow provides a mock function with given fields: query, args
func (_m *MockInterfaceDB) QueryRow(query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// QueryRowContext provides a mock function with given fields: ctx, query, args
func (_m *MockInterfaceDB) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// RegisterModel provides a mock function with given fields: models
func (_m *MockInterfaceDB) RegisterModel(models ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, models...)
	_m.Called(_ca...)
}

// ResetModel provides a mock function with given fields: ctx, models
func (_m *MockInterfaceDB) ResetModel(ctx context.Context, models ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, models...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) error); ok {
		r0 = rf(ctx, models...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunInTx provides a mock function with given fields: ctx, opts, fn
func (_m *MockInterfaceDB) RunInTx(ctx context.Context, opts *sql.TxOptions, fn func(context.Context, InterfaceTx) error) error {
	ret := _m.Called(ctx, opts, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions, func(context.Context, InterfaceTx) error) error); ok {
		r0 = rf(ctx, opts, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanRow provides a mock function with given fields: ctx, rows, dest
func (_m *MockInterfaceDB) ScanRow(ctx context.Context, rows *sql.Rows, dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, rows)
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Rows, ...interface{}) error); ok {
		r0 = rf(ctx, rows, dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanRows provides a mock function with given fields: ctx, rows, dest
func (_m *MockInterfaceDB) ScanRows(ctx context.Context, rows *sql.Rows, dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, rows)
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Rows, ...interface{}) error); ok {
		r0 = rf(ctx, rows, dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *MockInterfaceDB) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Table provides a mock function with given fields: typ
func (_m *MockInterfaceDB) Table(typ reflect.Type) *schema.Table {
	ret := _m.Called(typ)

	var r0 *schema.Table
	if rf, ok := ret.Get(0).(func(reflect.Type) *schema.Table); ok {
		r0 = rf(typ)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Table)
		}
	}

	return r0
}

// WithNamedArg provides a mock function with given fields: name, value
func (_m *MockInterfaceDB) WithNamedArg(name string, value interface{}) InterfaceDB {
	ret := _m.Called(name, value)

	var r0 InterfaceDB
	if rf, ok := ret.Get(0).(func(string, interface{}) InterfaceDB); ok {
		r0 = rf(name, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceDB)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockInterfaceDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfaceDB creates a new instance of MockInterfaceDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfaceDB(t mockConstructorTestingTNewMockInterfaceDB) *MockInterfaceDB {
	mock := &MockInterfaceDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
