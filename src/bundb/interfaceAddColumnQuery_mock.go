// Code generated by mockery. DO NOT EDIT.

package bundb

import (
	context "context"

	bun "github.com/uptrace/bun"

	mock "github.com/stretchr/testify/mock"

	schema "github.com/uptrace/bun/schema"

	sql "database/sql"
)

// MockInterfaceAddColumnQuery is an autogenerated mock type for the InterfaceAddColumnQuery type
type MockInterfaceAddColumnQuery struct {
	mock.Mock
}

// AppendQuery provides a mock function with given fields: fmter, b
func (_m *MockInterfaceAddColumnQuery) AppendQuery(fmter schema.Formatter, b []byte) ([]byte, error) {
	ret := _m.Called(fmter, b)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(schema.Formatter, []byte) []byte); ok {
		r0 = rf(fmter, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(schema.Formatter, []byte) error); ok {
		r1 = rf(fmter, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ColumnExpr provides a mock function with given fields: query, args
func (_m *MockInterfaceAddColumnQuery) ColumnExpr(query string, args ...interface{}) InterfaceAddColumnQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceAddColumnQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceAddColumnQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceAddColumnQuery)
		}
	}

	return r0
}

// Conn provides a mock function with given fields: db
func (_m *MockInterfaceAddColumnQuery) Conn(db bun.IConn) InterfaceAddColumnQuery {
	ret := _m.Called(db)

	var r0 InterfaceAddColumnQuery
	if rf, ok := ret.Get(0).(func(bun.IConn) InterfaceAddColumnQuery); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceAddColumnQuery)
		}
	}

	return r0
}

// Exec provides a mock function with given fields: ctx, dest
func (_m *MockInterfaceAddColumnQuery) Exec(ctx context.Context, dest ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, dest...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, dest...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IfNotExists provides a mock function with given fields:
func (_m *MockInterfaceAddColumnQuery) IfNotExists() InterfaceAddColumnQuery {
	ret := _m.Called()

	var r0 InterfaceAddColumnQuery
	if rf, ok := ret.Get(0).(func() InterfaceAddColumnQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceAddColumnQuery)
		}
	}

	return r0
}

// Model provides a mock function with given fields: model
func (_m *MockInterfaceAddColumnQuery) Model(model interface{}) InterfaceAddColumnQuery {
	ret := _m.Called(model)

	var r0 InterfaceAddColumnQuery
	if rf, ok := ret.Get(0).(func(interface{}) InterfaceAddColumnQuery); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceAddColumnQuery)
		}
	}

	return r0
}

// ModelTableExpr provides a mock function with given fields: query, args
func (_m *MockInterfaceAddColumnQuery) ModelTableExpr(query string, args ...interface{}) InterfaceAddColumnQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceAddColumnQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceAddColumnQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceAddColumnQuery)
		}
	}

	return r0
}

// Operation provides a mock function with given fields:
func (_m *MockInterfaceAddColumnQuery) Operation() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Table provides a mock function with given fields: tables
func (_m *MockInterfaceAddColumnQuery) Table(tables ...string) InterfaceAddColumnQuery {
	_va := make([]interface{}, len(tables))
	for _i := range tables {
		_va[_i] = tables[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceAddColumnQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceAddColumnQuery); ok {
		r0 = rf(tables...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceAddColumnQuery)
		}
	}

	return r0
}

// TableExpr provides a mock function with given fields: query, args
func (_m *MockInterfaceAddColumnQuery) TableExpr(query string, args ...interface{}) InterfaceAddColumnQuery {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 InterfaceAddColumnQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceAddColumnQuery); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceAddColumnQuery)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockInterfaceAddColumnQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfaceAddColumnQuery creates a new instance of MockInterfaceAddColumnQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfaceAddColumnQuery(t mockConstructorTestingTNewMockInterfaceAddColumnQuery) *MockInterfaceAddColumnQuery {
	mock := &MockInterfaceAddColumnQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
