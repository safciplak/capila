package templates

const ServiceInterface = `// code generated by ifacemaker; DO NOT EDIT.

package {{ .PrivateNameSingular }}Services

import (
	"context"

	{{ .PrivateNameSingular }}Models "github.com/safciplak/{{ .ApplicationName }}/src/business/{{ .PrivateNamePlural }}/models"
	"github.com/safciplak/{{ .ApplicationName }}/src/models"
)

// Interface{{ .PublicNameSingular }}Service is the interface implemented by {{ .PublicNameSingular }}Service
type Interface{{ .PublicNameSingular }}Service interface {
	// List returns a slice of {{ .PublicNameSingular }} entities matching the given params
	List(ctx context.Context, params *{{ .PrivateNameSingular }}Models.ListRequest) ([]models.{{ .PublicNameSingular }}, error)
	// Read returns a single {{ .PublicNameSingular }} entity matching the params
	Read(ctx context.Context, params *{{ .PrivateNameSingular }}Models.BaseRequest) (*models.{{ .PublicNameSingular }}, error)
	// Create creates a new {{ .PublicNameSingular }} entity
	Create(ctx context.Context, params *{{ .PrivateNameSingular }}Models.CreateRequest) (*models.{{ .PublicNameSingular }}, error)
	// Update updates a existing {{ .PublicNameSingular }} entity
	Update(ctx context.Context, params *{{ .PrivateNameSingular }}Models.UpdateRequest) (*models.{{ .PublicNameSingular }}, error)
	// Delete (soft)deletes a existing {{ .PublicNameSingular }} entity
	Delete(ctx context.Context, params *{{ .PrivateNameSingular }}Models.BaseRequest) (*models.{{ .PublicNameSingular }}, error)
}
`
