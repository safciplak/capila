// Code generated by mockery. DO NOT EDIT.

package database

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	orm "github.com/go-pg/pg/v10/orm"
)

// MockInterfaceORMQuery is an autogenerated mock type for the InterfaceORMQuery type
type MockInterfaceORMQuery struct {
	mock.Mock
}

// AllWithDeleted provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) AllWithDeleted() InterfaceORMQuery {
	ret := _m.Called()

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func() InterfaceORMQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// AppendQuery provides a mock function with given fields: fmter, b
func (_m *MockInterfaceORMQuery) AppendQuery(fmter orm.QueryFormatter, b []byte) ([]byte, error) {
	ret := _m.Called(fmter, b)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(orm.QueryFormatter, []byte) []byte); ok {
		r0 = rf(fmter, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(orm.QueryFormatter, []byte) error); ok {
		r1 = rf(fmter, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Apply provides a mock function with given fields: fn
func (_m *MockInterfaceORMQuery) Apply(fn func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery {
	ret := _m.Called(fn)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Clone provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) Clone() InterfaceORMQuery {
	ret := _m.Called()

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func() InterfaceORMQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Column provides a mock function with given fields: columns
func (_m *MockInterfaceORMQuery) Column(columns ...string) InterfaceORMQuery {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceORMQuery); ok {
		r0 = rf(columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// ColumnExpr provides a mock function with given fields: expr, params
func (_m *MockInterfaceORMQuery) ColumnExpr(expr string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, expr)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(expr, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Context provides a mock function with given fields: c
func (_m *MockInterfaceORMQuery) Context(c context.Context) InterfaceORMQuery {
	ret := _m.Called(c)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(context.Context) InterfaceORMQuery); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// CopyFrom provides a mock function with given fields: r, query, params
func (_m *MockInterfaceORMQuery) CopyFrom(r io.Reader, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, r, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(io.Reader, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(r, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, interface{}, ...interface{}) error); ok {
		r1 = rf(r, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyTo provides a mock function with given fields: w, query, params
func (_m *MockInterfaceORMQuery) CopyTo(w io.Writer, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, w, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(io.Writer, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(w, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Writer, interface{}, ...interface{}) error); ok {
		r1 = rf(w, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountEstimate provides a mock function with given fields: threshold
func (_m *MockInterfaceORMQuery) CountEstimate(threshold int) (int, error) {
	ret := _m.Called(threshold)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(threshold)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(threshold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComposite provides a mock function with given fields: opt
func (_m *MockInterfaceORMQuery) CreateComposite(opt *orm.CreateCompositeOptions) error {
	ret := _m.Called(opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*orm.CreateCompositeOptions) error); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTable provides a mock function with given fields: opt
func (_m *MockInterfaceORMQuery) CreateTable(opt *orm.CreateTableOptions) error {
	ret := _m.Called(opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*orm.CreateTableOptions) error); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB provides a mock function with given fields: db
func (_m *MockInterfaceORMQuery) DB(db orm.DB) InterfaceORMQuery {
	ret := _m.Called(db)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(orm.DB) InterfaceORMQuery); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: values
func (_m *MockInterfaceORMQuery) Delete(values ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(...interface{}) orm.Result); ok {
		r0 = rf(values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deleted provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) Deleted() InterfaceORMQuery {
	ret := _m.Called()

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func() InterfaceORMQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Distinct provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) Distinct() InterfaceORMQuery {
	ret := _m.Called()

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func() InterfaceORMQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// DistinctOn provides a mock function with given fields: expr, params
func (_m *MockInterfaceORMQuery) DistinctOn(expr string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, expr)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(expr, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// DropComposite provides a mock function with given fields: opt
func (_m *MockInterfaceORMQuery) DropComposite(opt *orm.DropCompositeOptions) error {
	ret := _m.Called(opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*orm.DropCompositeOptions) error); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropTable provides a mock function with given fields: opt
func (_m *MockInterfaceORMQuery) DropTable(opt *orm.DropTableOptions) error {
	ret := _m.Called(opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*orm.DropTableOptions) error); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Except provides a mock function with given fields: other
func (_m *MockInterfaceORMQuery) Except(other InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(other)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// ExceptAll provides a mock function with given fields: other
func (_m *MockInterfaceORMQuery) ExceptAll(other InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(other)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// ExcludeColumn provides a mock function with given fields: columns
func (_m *MockInterfaceORMQuery) ExcludeColumn(columns ...string) InterfaceORMQuery {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceORMQuery); ok {
		r0 = rf(columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Exec provides a mock function with given fields: query, params
func (_m *MockInterfaceORMQuery) Exec(query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecOne provides a mock function with given fields: query, params
func (_m *MockInterfaceORMQuery) ExecOne(query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) Exists() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// First provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) First() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// For provides a mock function with given fields: s, params
func (_m *MockInterfaceORMQuery) For(s string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(s, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// ForEach provides a mock function with given fields: fn
func (_m *MockInterfaceORMQuery) ForEach(fn interface{}) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceDelete provides a mock function with given fields: values
func (_m *MockInterfaceORMQuery) ForceDelete(values ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(...interface{}) orm.Result); ok {
		r0 = rf(values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Group provides a mock function with given fields: columns
func (_m *MockInterfaceORMQuery) Group(columns ...string) InterfaceORMQuery {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceORMQuery); ok {
		r0 = rf(columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// GroupExpr provides a mock function with given fields: group, params
func (_m *MockInterfaceORMQuery) GroupExpr(group string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, group)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(group, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Having provides a mock function with given fields: having, params
func (_m *MockInterfaceORMQuery) Having(having string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, having)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(having, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: values
func (_m *MockInterfaceORMQuery) Insert(values ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(...interface{}) orm.Result); ok {
		r0 = rf(values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Intersect provides a mock function with given fields: other
func (_m *MockInterfaceORMQuery) Intersect(other InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(other)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// IntersectAll provides a mock function with given fields: other
func (_m *MockInterfaceORMQuery) IntersectAll(other InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(other)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Join provides a mock function with given fields: join, params
func (_m *MockInterfaceORMQuery) Join(join string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, join)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(join, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// JoinOn provides a mock function with given fields: condition, params
func (_m *MockInterfaceORMQuery) JoinOn(condition string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, condition)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(condition, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// JoinOnOr provides a mock function with given fields: condition, params
func (_m *MockInterfaceORMQuery) JoinOnOr(condition string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, condition)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(condition, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Last provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) Last() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Limit provides a mock function with given fields: n
func (_m *MockInterfaceORMQuery) Limit(n int) InterfaceORMQuery {
	ret := _m.Called(n)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(int) InterfaceORMQuery); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Model provides a mock function with given fields: model
func (_m *MockInterfaceORMQuery) Model(model ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, model...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(...interface{}) InterfaceORMQuery); ok {
		r0 = rf(model...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// New provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) New() InterfaceORMQuery {
	ret := _m.Called()

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func() InterfaceORMQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Offset provides a mock function with given fields: n
func (_m *MockInterfaceORMQuery) Offset(n int) InterfaceORMQuery {
	ret := _m.Called(n)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(int) InterfaceORMQuery); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// OnConflict provides a mock function with given fields: s, params
func (_m *MockInterfaceORMQuery) OnConflict(s string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(s, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Order provides a mock function with given fields: orders
func (_m *MockInterfaceORMQuery) Order(orders ...string) InterfaceORMQuery {
	_va := make([]interface{}, len(orders))
	for _i := range orders {
		_va[_i] = orders[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceORMQuery); ok {
		r0 = rf(orders...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// OrderExpr provides a mock function with given fields: order, params
func (_m *MockInterfaceORMQuery) OrderExpr(order string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, order)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(order, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Query provides a mock function with given fields: model, query, params
func (_m *MockInterfaceORMQuery) Query(model interface{}, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, model, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(model, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...interface{}) error); ok {
		r1 = rf(model, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryOne provides a mock function with given fields: model, query, params
func (_m *MockInterfaceORMQuery) QueryOne(model interface{}, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, model, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(model, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...interface{}) error); ok {
		r1 = rf(model, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Relation provides a mock function with given fields: name, apply
func (_m *MockInterfaceORMQuery) Relation(name string, apply ...func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery {
	_va := make([]interface{}, len(apply))
	for _i := range apply {
		_va[_i] = apply[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery); ok {
		r0 = rf(name, apply...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Returning provides a mock function with given fields: s, params
func (_m *MockInterfaceORMQuery) Returning(s string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(s, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Select provides a mock function with given fields: values
func (_m *MockInterfaceORMQuery) Select(values ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(values...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAndCount provides a mock function with given fields: values
func (_m *MockInterfaceORMQuery) SelectAndCount(values ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(...interface{}) int); ok {
		r0 = rf(values...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAndCountEstimate provides a mock function with given fields: threshold, values
func (_m *MockInterfaceORMQuery) SelectAndCountEstimate(threshold int, values ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, threshold)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, ...interface{}) int); ok {
		r0 = rf(threshold, values...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, ...interface{}) error); ok {
		r1 = rf(threshold, values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectOrInsert provides a mock function with given fields: values
func (_m *MockInterfaceORMQuery) SelectOrInsert(values ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...interface{}) bool); ok {
		r0 = rf(values...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: set, params
func (_m *MockInterfaceORMQuery) Set(set string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, set)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(set, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Table provides a mock function with given fields: tables
func (_m *MockInterfaceORMQuery) Table(tables ...string) InterfaceORMQuery {
	_va := make([]interface{}, len(tables))
	for _i := range tables {
		_va[_i] = tables[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(...string) InterfaceORMQuery); ok {
		r0 = rf(tables...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// TableExpr provides a mock function with given fields: expr, params
func (_m *MockInterfaceORMQuery) TableExpr(expr string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, expr)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(expr, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// TableModel provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) TableModel() orm.TableModel {
	ret := _m.Called()

	var r0 orm.TableModel
	if rf, ok := ret.Get(0).(func() orm.TableModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.TableModel)
		}
	}

	return r0
}

// Union provides a mock function with given fields: other
func (_m *MockInterfaceORMQuery) Union(other InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(other)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// UnionAll provides a mock function with given fields: other
func (_m *MockInterfaceORMQuery) UnionAll(other InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(other)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Update provides a mock function with given fields: scan
func (_m *MockInterfaceORMQuery) Update(scan ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, scan...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(...interface{}) orm.Result); ok {
		r0 = rf(scan...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(scan...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotZero provides a mock function with given fields: scan
func (_m *MockInterfaceORMQuery) UpdateNotZero(scan ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, scan...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(...interface{}) orm.Result); ok {
		r0 = rf(scan...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(scan...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Value provides a mock function with given fields: column, value, params
func (_m *MockInterfaceORMQuery) Value(column string, value string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, column, value)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(column, value, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Where provides a mock function with given fields: condition, params
func (_m *MockInterfaceORMQuery) Where(condition string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, condition)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(condition, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WhereGroup provides a mock function with given fields: fn
func (_m *MockInterfaceORMQuery) WhereGroup(fn func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery {
	ret := _m.Called(fn)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WhereIn provides a mock function with given fields: where, slice
func (_m *MockInterfaceORMQuery) WhereIn(where string, slice interface{}) InterfaceORMQuery {
	ret := _m.Called(where, slice)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, interface{}) InterfaceORMQuery); ok {
		r0 = rf(where, slice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WhereInMulti provides a mock function with given fields: where, values
func (_m *MockInterfaceORMQuery) WhereInMulti(where string, values ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, where)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(where, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WhereNotGroup provides a mock function with given fields: fn
func (_m *MockInterfaceORMQuery) WhereNotGroup(fn func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery {
	ret := _m.Called(fn)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WhereOr provides a mock function with given fields: condition, params
func (_m *MockInterfaceORMQuery) WhereOr(condition string, params ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, condition)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(condition, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WhereOrGroup provides a mock function with given fields: fn
func (_m *MockInterfaceORMQuery) WhereOrGroup(fn func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery {
	ret := _m.Called(fn)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WhereOrNotGroup provides a mock function with given fields: fn
func (_m *MockInterfaceORMQuery) WhereOrNotGroup(fn func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery {
	ret := _m.Called(fn)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(func(InterfaceORMQuery) (InterfaceORMQuery, error)) InterfaceORMQuery); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WherePK provides a mock function with given fields:
func (_m *MockInterfaceORMQuery) WherePK() InterfaceORMQuery {
	ret := _m.Called()

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func() InterfaceORMQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// With provides a mock function with given fields: name, subq
func (_m *MockInterfaceORMQuery) With(name string, subq InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(name, subq)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(name, subq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WithDelete provides a mock function with given fields: name, subq
func (_m *MockInterfaceORMQuery) WithDelete(name string, subq InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(name, subq)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(name, subq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WithInsert provides a mock function with given fields: name, subq
func (_m *MockInterfaceORMQuery) WithInsert(name string, subq InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(name, subq)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(name, subq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WithUpdate provides a mock function with given fields: name, subq
func (_m *MockInterfaceORMQuery) WithUpdate(name string, subq InterfaceORMQuery) InterfaceORMQuery {
	ret := _m.Called(name, subq)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string, InterfaceORMQuery) InterfaceORMQuery); ok {
		r0 = rf(name, subq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// WrapWith provides a mock function with given fields: name
func (_m *MockInterfaceORMQuery) WrapWith(name string) InterfaceORMQuery {
	ret := _m.Called(name)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(string) InterfaceORMQuery); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockInterfaceORMQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfaceORMQuery creates a new instance of MockInterfaceORMQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfaceORMQuery(t mockConstructorTestingTNewMockInterfaceORMQuery) *MockInterfaceORMQuery {
	mock := &MockInterfaceORMQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
