// Code generated by mockery. DO NOT EDIT.

package database

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	orm "github.com/go-pg/pg/v10/orm"
)

// MockInterfacePgTx is an autogenerated mock type for the InterfacePgTx type
type MockInterfacePgTx struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *MockInterfacePgTx) Begin() (InterfacePgTx, error) {
	ret := _m.Called()

	var r0 InterfacePgTx
	if rf, ok := ret.Get(0).(func() InterfacePgTx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfacePgTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *MockInterfacePgTx) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseContext provides a mock function with given fields: ctx
func (_m *MockInterfacePgTx) CloseContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockInterfacePgTx) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitContext provides a mock function with given fields: ctx
func (_m *MockInterfacePgTx) CommitContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *MockInterfacePgTx) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// CopyFrom provides a mock function with given fields: r, query, params
func (_m *MockInterfacePgTx) CopyFrom(r io.Reader, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, r, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(io.Reader, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(r, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, interface{}, ...interface{}) error); ok {
		r1 = rf(r, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyTo provides a mock function with given fields: w, query, params
func (_m *MockInterfacePgTx) CopyTo(w io.Writer, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, w, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(io.Writer, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(w, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Writer, interface{}, ...interface{}) error); ok {
		r1 = rf(w, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exec provides a mock function with given fields: query, params
func (_m *MockInterfacePgTx) Exec(query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecContext provides a mock function with given fields: c, query, params
func (_m *MockInterfacePgTx) ExecContext(c context.Context, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, c, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(c, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...interface{}) error); ok {
		r1 = rf(c, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecOne provides a mock function with given fields: query, params
func (_m *MockInterfacePgTx) ExecOne(query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecOneContext provides a mock function with given fields: c, query, params
func (_m *MockInterfacePgTx) ExecOneContext(c context.Context, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, c, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(c, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...interface{}) error); ok {
		r1 = rf(c, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Formatter provides a mock function with given fields:
func (_m *MockInterfacePgTx) Formatter() orm.QueryFormatter {
	ret := _m.Called()

	var r0 orm.QueryFormatter
	if rf, ok := ret.Get(0).(func() orm.QueryFormatter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.QueryFormatter)
		}
	}

	return r0
}

// Model provides a mock function with given fields: model
func (_m *MockInterfacePgTx) Model(model ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, model...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(...interface{}) InterfaceORMQuery); ok {
		r0 = rf(model...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// ModelContext provides a mock function with given fields: c, model
func (_m *MockInterfacePgTx) ModelContext(c context.Context, model ...interface{}) InterfaceORMQuery {
	var _ca []interface{}
	_ca = append(_ca, c)
	_ca = append(_ca, model...)
	ret := _m.Called(_ca...)

	var r0 InterfaceORMQuery
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) InterfaceORMQuery); ok {
		r0 = rf(c, model...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceORMQuery)
		}
	}

	return r0
}

// Prepare provides a mock function with given fields: q
func (_m *MockInterfacePgTx) Prepare(q string) (InterfacePgStmt, error) {
	ret := _m.Called(q)

	var r0 InterfacePgStmt
	if rf, ok := ret.Get(0).(func(string) InterfacePgStmt); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfacePgStmt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: model, query, params
func (_m *MockInterfacePgTx) Query(model interface{}, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, model, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(model, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...interface{}) error); ok {
		r1 = rf(model, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryContext provides a mock function with given fields: c, model, query, params
func (_m *MockInterfacePgTx) QueryContext(c context.Context, model interface{}, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, c, model, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(c, model, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...interface{}) error); ok {
		r1 = rf(c, model, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryOne provides a mock function with given fields: model, query, params
func (_m *MockInterfacePgTx) QueryOne(model interface{}, query interface{}, params ...interface{}) (orm.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, model, query)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...interface{}) orm.Result); ok {
		r0 = rf(model, query, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}, ...interface{}) error); ok {
		r1 = rf(model, query, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields:
func (_m *MockInterfacePgTx) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackContext provides a mock function with given fields: ctx
func (_m *MockInterfacePgTx) RollbackContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunInTransaction provides a mock function with given fields: ctx, fn
func (_m *MockInterfacePgTx) RunInTransaction(ctx context.Context, fn func(InterfacePgTx) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(InterfacePgTx) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stmt provides a mock function with given fields: stmt
func (_m *MockInterfacePgTx) Stmt(stmt InterfacePgStmt) InterfacePgStmt {
	ret := _m.Called(stmt)

	var r0 InterfacePgStmt
	if rf, ok := ret.Get(0).(func(InterfacePgStmt) InterfacePgStmt); ok {
		r0 = rf(stmt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfacePgStmt)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockInterfacePgTx interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfacePgTx creates a new instance of MockInterfacePgTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfacePgTx(t mockConstructorTestingTNewMockInterfacePgTx) *MockInterfacePgTx {
	mock := &MockInterfacePgTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
