// Code generated by mockery. DO NOT EDIT.

package helpers

import mock "github.com/stretchr/testify/mock"

// MockInterfaceEnvironmentHelper is an autogenerated mock type for the InterfaceEnvironmentHelper type
type MockInterfaceEnvironmentHelper struct {
	mock.Mock
}

// Error provides a mock function with given fields:
func (_m *MockInterfaceEnvironmentHelper) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: environmentVariable
func (_m *MockInterfaceEnvironmentHelper) Get(environmentVariable string) string {
	ret := _m.Called(environmentVariable)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(environmentVariable)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetBoolean provides a mock function with given fields: key
func (_m *MockInterfaceEnvironmentHelper) GetBoolean(key string) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInteger provides a mock function with given fields: key
func (_m *MockInterfaceEnvironmentHelper) GetInteger(key string) (int, error) {
	ret := _m.Called(key)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetString provides a mock function with given fields: key
func (_m *MockInterfaceEnvironmentHelper) GetString(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockInterfaceEnvironmentHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfaceEnvironmentHelper creates a new instance of MockInterfaceEnvironmentHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfaceEnvironmentHelper(t mockConstructorTestingTNewMockInterfaceEnvironmentHelper) *MockInterfaceEnvironmentHelper {
	mock := &MockInterfaceEnvironmentHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
