// Code generated by mockery. DO NOT EDIT.

package logger

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	zap "go.uber.org/zap"
)

// MockInterfaceLogger is an autogenerated mock type for the InterfaceLogger type
type MockInterfaceLogger struct {
	mock.Mock
}

// GetZapLogger provides a mock function with given fields:
func (_m *MockInterfaceLogger) GetZapLogger() *zap.Logger {
	ret := _m.Called()

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// Log provides a mock function with given fields: ctx
func (_m *MockInterfaceLogger) Log(ctx context.Context) InterfaceZapLogger {
	ret := _m.Called(ctx)

	var r0 InterfaceZapLogger
	if rf, ok := ret.Get(0).(func(context.Context) InterfaceZapLogger); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(InterfaceZapLogger)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockInterfaceLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfaceLogger creates a new instance of MockInterfaceLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfaceLogger(t mockConstructorTestingTNewMockInterfaceLogger) *MockInterfaceLogger {
	mock := &MockInterfaceLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
