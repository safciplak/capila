// Code generated by mockery. DO NOT EDIT.

package logger

import (
	mock "github.com/stretchr/testify/mock"
	zap "go.uber.org/zap"

	zapcore "go.uber.org/zap/zapcore"
)

// MockInterfaceZapLogger is an autogenerated mock type for the InterfaceZapLogger type
type MockInterfaceZapLogger struct {
	mock.Mock
}

// Check provides a mock function with given fields: lvl, msg
func (_m *MockInterfaceZapLogger) Check(lvl zapcore.Level, msg string) *zapcore.CheckedEntry {
	ret := _m.Called(lvl, msg)

	var r0 *zapcore.CheckedEntry
	if rf, ok := ret.Get(0).(func(zapcore.Level, string) *zapcore.CheckedEntry); ok {
		r0 = rf(lvl, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zapcore.CheckedEntry)
		}
	}

	return r0
}

// Core provides a mock function with given fields:
func (_m *MockInterfaceZapLogger) Core() zapcore.Core {
	ret := _m.Called()

	var r0 zapcore.Core
	if rf, ok := ret.Get(0).(func() zapcore.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zapcore.Core)
		}
	}

	return r0
}

// DPanic provides a mock function with given fields: msg, fields
func (_m *MockInterfaceZapLogger) DPanic(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: msg, fields
func (_m *MockInterfaceZapLogger) Debug(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg, fields
func (_m *MockInterfaceZapLogger) Error(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: msg, fields
func (_m *MockInterfaceZapLogger) Fatal(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: msg, fields
func (_m *MockInterfaceZapLogger) Info(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Panic provides a mock function with given fields: msg, fields
func (_m *MockInterfaceZapLogger) Panic(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Sync provides a mock function with given fields:
func (_m *MockInterfaceZapLogger) Sync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Warn provides a mock function with given fields: msg, fields
func (_m *MockInterfaceZapLogger) Warn(msg string, fields ...zapcore.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// With provides a mock function with given fields: fields
func (_m *MockInterfaceZapLogger) With(fields ...zapcore.Field) *zap.Logger {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func(...zapcore.Field) *zap.Logger); ok {
		r0 = rf(fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// WithOptions provides a mock function with given fields: opts
func (_m *MockInterfaceZapLogger) WithOptions(opts ...zap.Option) *zap.Logger {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func(...zap.Option) *zap.Logger); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockInterfaceZapLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterfaceZapLogger creates a new instance of MockInterfaceZapLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterfaceZapLogger(t mockConstructorTestingTNewMockInterfaceZapLogger) *MockInterfaceZapLogger {
	mock := &MockInterfaceZapLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
